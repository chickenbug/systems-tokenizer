Case			Input				Expected Output


BASIC CASES

No Arg			no argument			"Error: Incorrect Number of Arguments"

Empty arg		"" 				

Basic word		"cats"

Word deliniated		"[dogs] ca56ts claws\b"		leftbracket "["
     				     			word "dogs"
							rightbracket "]"
							word "ca56ts"
							word "claws"
							[0x8]

Malformed Word	       	"apple>=pear@berry->.a"		word "apple"
	  						greater than or equal ">="
							Malformed Token, Moving to Next

Basic numbers		"03254 08124 1.0"		octal "03254"
      			       				decimal "08124"
							float "1.0"

Advanced floats		"1e4 1.2E6 1e-2 4.2E+4"		float "1e4"
	 		     	   			float "1.2E6"
							float "1e-2"
							float "4.2E+4"

Invalid floats		"1. 1e 2E 3e- 4-"		Malformed Token, Moving to Next
			       	      			Malformed Token, Moving to Next
							Malformed Token, Moving to Next
							Malformed Token, Moving to Next
							decimal "4"
							subtract "-"

Basic C-operators	"*= .^()"			multiply equals "*="
      			    				structuremember "."
							bitwise exclusive or "^"
							left parentheses "("
							right parentheses ")"						

Hexadecimal		"0xA 0X1234 0X67t1"		hexadecimal "0xA"
			     	    			hexadecimal "0X1234"
							Malformed Token, Moving to Next

Keywords		"enum if() sizeof switch234"	C Keyword "enum"
			      	   	  		C Keyword "if"
							left parentheses "("
							right parentheses ")"
							C Keyword "sizeof"
							word "switch234"

Single Line Comments 	""		
       	    			    	
Multiple Line Comments	"789.4\*today*\foo"		float "789.4"
	      						word "foo"

Single quotes		"hello:'hi' 6 '3"		word "hello"
       				      			false conditional ":"
							string "'hi'"
							decimal "6"
							Malformed Token, Moving to Next





COMPLEX CASES

Quotes 		"'  # :! ran$ ' '123' g'13.0' [\"a \t\n k\"]/*whee!\nword"	string "'  # :! ran$ '"
       			      	      	      	      	   		 	string "'123'"
										 Malformed Token, Moving to Next
									 	 leftbracket "[" 
									 	 string ""a  
									  	 k""
									  	 rightbracket "]"
       			      	      	   				 	 divide "/"
									 	 multiply "*"
									 	 word "whee"
									  	 negate "!"
									  	 word "word"
							

Nested Operators,	"{fun}~'c'&&[10*3(var)]^=17.325E-2\v00230"	Malformed Token, Moving to Next
Invalid Punctuation       						onescomplement "~"
									string "'c'"
									logical and "&&"
									leftbracket "["
									decimal "10"
									multiply "*"
									decimal "3"
									left parentheses "("
									word "var"
									right parentheses ")"
							      		rightbracket "]"
									bitwise exclusive or equals "^="
									float "17.325E-2"
							     		octal "00230"



Multiple C Operators,	"\n\r\\n 0.++++=..*="				Malformed Token, Moving to Next
Escape chars at start	  			 			Malformed Token, Moving to Next
									inc "++"
									inc "++"
									assignment operator "="
									structuremember "."
									structuremember "."
									multiply equals "*="



Malformed tokens produce an error message of "Malformed Token, Moving to Next". 

Delimiters are  valid C-operators (excluding '+', '-', '.', ''', and '"'), escape characters, and whitespace.
If a token starts with or contains  any other symbol (such as '#' or '@'), then the token is malformed unless it is the case of MATCHING single or double quotes.

Tokens that contain an unmatched single or double quote are always malformed. Only if the token contains a matched pair of single or double quotes and there is a delimiter in front of the quotes, then the contents within the quotes are a string token. If there are escape characters within a string token, they do not produce a hexadecimal print message.  The string token is printed out with single or double quotes around it. 


